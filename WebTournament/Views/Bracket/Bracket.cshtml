@model BracketState

@if (Model.State == string.Empty)
{
  <div>Сделайте жеребьевку игроков!</div>
}
else
{
  <div id="alertMessage" class="alert alert-success collapse">
    <div id="alertText">Турнирная сетка успешно сохранена</div>
    <div class="text-center"><btn class="btn" id="linkClose">Закрыть</btn></div>
  </div>
  <nav class="navbar bg-light navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
      <button class="btn btn-success" id="saveButton">Сохранить</button>
      <button class="btn btn-success" onclick="history.back()">Назад</button>
    </div>
  </nav>
  <div class="container-fluid pt-lg-5">
    <div class="demo align-content-center">
      </div>
  </div>
  
}
@section Scripts
{
  <script type="text/javascript">
  
  $('#linkClose').click(function () {
          $('#alertMessage').hide('fade');
          $("#alertText").empty();
      });
  
    var customData = @Html.Raw(Model.State);
    console.log(customData)
    /* Edit function is called when team label is clicked */
    function edit_fn(container, data, doneCb) {
      var input = $('<input type="text">')
      input.val(data ? data.name : '')
      container.html(input)
      input.focus()
      input.blur(function() {
        var inputValue = input.val()
        if (inputValue.length === 0) {
          doneCb(null); // Drop the team and replace with BYE
        } else {
          var flagAndName = inputValue.split(':') // Expects correct input
          doneCb({flag: flagAndName[0], name: flagAndName[1]})
        }
      })
    }
  
    function render_fn(container, data, score, state) {
      switch(state) {
        case "empty-bye":
          container.append("No team")
          return;
        case "empty-tbd":
          container.append("Upcoming")
          return;
  
        case "entry-no-score":
        case "entry-default-win":
        case "entry-complete":
          container.append(data.name)
          return;
      }
    }
    $("#saveButton").click(function(e) {
                    console.log(e);
                    var bracketData = $('.demo').bracket('data');
                    let bracketState = {id : '@Model.Id', state : JSON.stringify(bracketData)};
                    $.ajax({
                                url: '/Bracket/SaveState',
                                method: 'POST',
                                data: bracketState,
                                cache: false,
                                xhr: function () {
                                    let xhr = new XMLHttpRequest();
                                    xhr.onreadystatechange = function () {
                                        if (xhr.readyState === 2) {
                                            if (xhr.status === 200) {
                                                xhr.responseType = "text";
                                            }
                                        }
                                    };
                                    return xhr;
                                },
                                success: function (data) {
                                $('#alertMessage').show('fade');
          
                                },
                                error: function (data) {
                                    console.log(data);
                                   
                                }
                            });
                  });
     $(function() {
       $('.demo').bracket({
        init: customData,
        skipConsolationRound: true,
        save: function(){}, /* without save() labels are disabled */
        decorator: {edit: edit_fn,
          render: render_fn},
        disableToolbar: true,
        disableTeamEdit: true,
        teamWidth: 93,
        scoreWidth: 31,
        matchMargin: 87,
        roundMargin: 84
      });
  
      
  });
  
</script>
}

